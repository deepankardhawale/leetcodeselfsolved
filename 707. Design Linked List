class Node:
    def __init__(self,data):
        self.data=data
        self.next = None
        self.prev = None

class MyLinkedList(object):

    def __init__(self):
        self.head = None
        self.tail = None

    def get(self, index):
        """
        :type index: int
        :rtype: int
        """
        i = 0
        curr = self.head
        while curr and i < index:
            curr = curr.next
            i+=1
        return curr.data if curr else -1
        

    def addAtHead(self, val):
        """
        :type val: int
        :rtype: None
        """
        newnode = Node(val)
        if not self.head:
            self.head = self.tail = newnode
        else:
            newnode.next = self.head
            self.head.prev = newnode
            self.head = newnode
        return None
        

    def addAtTail(self, val):
        """
        :type val: int
        :rtype: None
        """
        newnode = Node(val)
        if not self.tail:
            self.head = self.tail = newnode
        else:
            newnode.prev = self.tail
            self.tail.next = newnode
            self.tail = newnode
        return None
        

    def addAtIndex(self, index, val):
        """
        :type index: int
        :type val: int
        :rtype: None
        """
        if index == 0:
            self.addAtHead(val)
            return

        curr = self.head
        i = 0
        while curr and i < index - 1:
            curr = curr.next
            i += 1

        if not curr:
            return  # Index is out of bounds

        newnode = Node(val)
        newnode.next = curr.next
        newnode.prev = curr
        if curr.next:
            curr.next.prev = newnode
        curr.next = newnode
        if newnode.next is None:
            self.tail = newnode
        return None

    def deleteAtIndex(self, index):
        """
        :type index: int
        :rtype: None
        """
        if not self.head:
            return

        curr = self.head
        if index == 0:
            if self.head == self.tail:
                self.head = self.tail = None
            else:
                self.head = self.head.next
                if self.head:
                    self.head.prev = None
            return

        i = 0
        while curr and i < index - 1:
            curr = curr.next
            i += 1

        if not curr or not curr.next:
            return  # Index is out of bounds

        if curr.next == self.tail:
            self.tail = curr

        curr.next = curr.next.next
        if curr.next:
            curr.next.prev = curr
        return None
# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
